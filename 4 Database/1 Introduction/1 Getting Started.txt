
1 Introduction

  Database backends using 
  1. Raw SQL, 
  2. Fluent query builder, and 
  3. Eloquent ORM. 

  Laravel supports four databases:
    MySQL 5.6+ (Version Policy)
    PostgreSQL 9.4+ (Version Policy)
    SQLite 3.8.8+
    SQL Server 2017+ (Version Policy)

    Configuration Using URLs
    database connections are configured using multiple configuration values such as host, database, username, password, etc.
    
    Some managed database providers such as Heroku provide a single database "URL" that contains all of the connection information for the database in a single string. 
    mysql://root:password@127.0.0.1/forge?charset=UTF-8

    These URLs typically follow a standard schema convention:
    driver://username:password@host:port/database?options



2 Configuration
  The database configuration for your application is located at config/database.php. In this file you may define all of your database connections, as well as specify which connection should be used by default. 

  SQLite Configuration
  After creating a new SQLite database using a command such as touch database/database.sqlite
  DB_CONNECTION=sqlite
  DB_DATABASE=/absolute/path/to/database.sqlite

  To enable foreign key constraints for SQLite connections, you should set the DB_FOREIGN_KEYS environment variable to true:
  DB_FOREIGN_KEYS=true


3 Read & Write Connections
  Sometimes you may wish to use one database connection for SELECT statements, and another for INSERT, UPDATE, and DELETE statements. 
    'mysql' => [
      'read' => [
          'host' => [
              '192.168.1.1',
              '196.168.1.2',
          ],
      ],
      'write' => [
          'host' => [
              '196.168.1.3',
          ],
      ],
      'sticky'    => true,
      'driver'    => 'mysql',
      'database'  => 'database',
      'username'  => 'root',
      'password'  => '',
      'charset'   => 'utf8mb4',
      'collation' => 'utf8mb4_unicode_ci',
      'prefix'    => '',
  ],


4 Using Multiple Database Connections
  $users = DB::connection('foo')->select(...);


5 Running Raw SQL Queries
The DB facade provides methods for each type of query: select, update, insert, delete, and statement.
  $users = DB::select('select * from users where active = ?', [1]);
  return view('user.index', ['users' => $users]);

  The first argument passed to the select method is the raw SQL query, while the second argument is any parameter bindings that need to be bound to the query. 

  Using Named Bindings
  $results = DB::select('select * from users where id = :id', ['id' => 1]);


  Running An Insert statement
  DB::insert('insert into users (id, name) values (?, ?)', [1, 'Dayle']);

  Running An Update Statement
  $deleted = DB::delete('delete from users');

  Running A General Statement
  DB::statement('drop table users');


6 Listening For Query Events
If you would like to receive each SQL query executed by your application, you may use the listen method. 

  This method is useful for logging queries or debugging. You may register your query listener in a service provider:

  <?php

  namespace App\Providers;

  use Illuminate\Support\Facades\DB;
  use Illuminate\Support\ServiceProvider;

  class AppServiceProvider extends ServiceProvider
  {
      /**
      * Register any application services.
      *
      * @return void
      */
      public function register()
      {
          //
      }

      /**
      * Bootstrap any application services.
      *
      * @return void
      */
      public function boot()
      {
          DB::listen(function ($query) {
              // $query->sql
              // $query->bindings
              // $query->time
          });
      }
  }


7 Database Transactions
You may use the transaction method on the DB facade to run a set of operations within a database transaction
DB::transaction(function () {
    DB::table('users')->update(['votes' => 1]);

    DB::table('posts')->delete();
});



8 Handling Deadlocks
The transaction method accepts an optional second argument which defines the number of times a transaction should be reattempted when a deadlock occurs. Once these attempts have been exhausted, an exception will be thrown:

DB::transaction(function () {
    DB::table('users')->update(['votes' => 1]);

    DB::table('posts')->delete();
}, 5);



9 Manually Using Transactions
If you would like to begin a transaction manually and have complete control over rollbacks and commits, you may use the beginTransaction method on the DB facade:

DB::beginTransaction();
You can rollback the transaction via the rollBack method:

DB::rollBack();
Lastly, you can commit a transaction via the commit method:

DB::commit();
s






